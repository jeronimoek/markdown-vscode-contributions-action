"use strict";

require("core-js/modules/es.array.push.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.markdownVscodeContributions = markdownVscodeContributions;
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.error.cause.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.symbol.description.js");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _getTablesWithData = require("./getTablesWithData");
var _tableToMarkdown = require("./tableToMarkdown");
var _appRootPath = _interopRequireDefault(require("app-root-path"));
var _os = require("os");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function markdownVscodeContributions({
  packagePath = "./package.json",
  inputPath = "./README.md",
  outputPath = inputPath,
  options = {}
} = {}) {
  const defaultOptions = {
    rootPaths: true
  };
  options = _objectSpread(_objectSpread({}, defaultOptions), options);
  const getPath = filePath => options.rootPaths ? _path.default.join(_appRootPath.default.path, filePath) : filePath;
  const rootInputFile = getPath(inputPath);
  let inputFile;
  try {
    inputFile = _fsExtra.default.readFileSync(rootInputFile, "utf8").replace(/\r?\n/g, _os.EOL);
  } catch (error) {
    throw new Error(`Error reading file ${rootInputFile}`);
  }
  const rootPackagePath = getPath(packagePath);
  let packageFile;
  try {
    packageFile = _fsExtra.default.readFileSync(rootPackagePath, "utf8");
  } catch (error) {
    throw new Error(`Error reading file ${rootPackagePath}`);
  }
  let outputText = inputFile;
  let tables;
  try {
    tables = (0, _getTablesWithData.getTablesWithData)(packageFile, inputFile);
  } catch (error) {
    if (error !== null && error !== void 0 && error.message) {
      throw new Error(`Error getting tables data from files ${rootPackagePath} and ${rootInputFile}: ${error.message}`);
    }
    throw error;
  }
  tables.sort((table1, table2) => table2.index - table1.index);
  for (const table of tables) {
    if (Object.keys(table.columns).length === 0) continue;
    if (Object.values(table.columns)[0].values.length === 0) continue;
    const tableStartIndex = table.endIndex;
    // Search new lines non empty and not starting with "|"
    const nextNewLineNonRelatedRelativeIndex = (_os.EOL + outputText.slice(tableStartIndex)).search(/\r?\n([^|\r\n]|$)/);
    const tableEndIndex = nextNewLineNonRelatedRelativeIndex !== -1 ? nextNewLineNonRelatedRelativeIndex + tableStartIndex : tableStartIndex;
    outputText = outputText.slice(0, tableStartIndex) + (0, _tableToMarkdown.tableToMarkdown)(table) + outputText.slice(tableEndIndex);
  }
  if (_fsExtra.default.existsSync(getPath(outputPath))) {
    const outputInitialText = _fsExtra.default.readFileSync(getPath(outputPath), "utf8");
    if (outputInitialText === outputText) {
      // TODO: Notify no changes done (skip step)
      return outputText;
    }
  }
  _fsExtra.default.writeFileSync(getPath(outputPath), outputText);

  // TODO: Commit changes

  return outputText;
}
var _default = {
  markdownVscodeContributions
};
exports.default = _default;