"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.markdownVscodeContributions = markdownVscodeContributions;
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.error.cause.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.iterator.js");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _getTablesWithData = require("./getTablesWithData");
var _tableToMarkdown = require("./tableToMarkdown");
var _appRootPath = _interopRequireDefault(require("app-root-path"));
var _os = require("os");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function markdownVscodeContributions({
  packagePath = "./package.json",
  inputPath = "./README.md",
  outputPath = inputPath
} = {}) {
  const rootInputFile = _path.default.join(_appRootPath.default.path, inputPath);
  const inputFile = _fsExtra.default.readFileSync(rootInputFile, "utf8").replace(/\r?\n/g, _os.EOL);
  const rootPackagePath = _path.default.join(_appRootPath.default.path, packagePath);
  const packageFile = _fsExtra.default.readFileSync(rootPackagePath, "utf8");
  let outputText = inputFile;
  let tables;
  try {
    tables = (0, _getTablesWithData.getTablesWithData)(packageFile, inputFile);
  } catch (error) {
    if (error !== null && error !== void 0 && error.message) {
      throw new Error(`Error getting tables data from files ${rootPackagePath} and ${rootInputFile}: ${error.message}`);
    }
    throw error;
  }
  tables.sort((table1, table2) => table2.index - table1.index);
  for (const table of tables) {
    if (Object.keys(table.columns).length === 0) continue;
    if (Object.values(table.columns)[0].values.length === 0) continue;
    const tableStartIndex = table.endIndex;
    // Search new lines non empty and not starting with "|"
    const nextNewLineNonRelatedRelativeIndex = (_os.EOL + outputText.slice(tableStartIndex)).search(/\r?\n([^|\r\n]|$)/);
    const tableEndIndex = nextNewLineNonRelatedRelativeIndex !== -1 ? nextNewLineNonRelatedRelativeIndex + tableStartIndex : tableStartIndex;
    outputText = outputText.slice(0, tableStartIndex) + (0, _tableToMarkdown.tableToMarkdown)(table) + outputText.slice(tableEndIndex);
  }
  if (_fsExtra.default.existsSync(_path.default.join(_appRootPath.default.path, outputPath))) {
    const outputInitialText = _fsExtra.default.readFileSync(_path.default.join(_appRootPath.default.path, outputPath), "utf8");
    if (outputInitialText === outputText) {
      // TODO: Notify no changes done (skip step)
      return outputText;
    }
  }
  _fsExtra.default.writeFileSync(_path.default.join(_appRootPath.default.path, outputPath), outputText);

  // TODO: Commit changes

  return outputText;
}
var _default = {
  markdownVscodeContributions
};
exports.default = _default;